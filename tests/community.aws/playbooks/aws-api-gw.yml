- name: Test API Gateway creation
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars.yml

  vars:
    lambda_role: rollback-lambda-role
    lambda_name: rollbackFunc
    lambda_layer: rollbackLayer
    runtime: python3.12
    zip_file: files/hello.zip
    handler: hello.lambda_handler
    api_gw_name: rollback-gw

  tasks:
    - name: Create an IAM Role
      amazon.aws.iam_role:
        name: "{{ lambda_role }}"
        assume_role_policy_document: >-
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": "lambda.amazonaws.com" },
                "Action": "sts:AssumeRole"
              }      
            ]
          }
        state: present
        region: "{{ region }}"
      register: role

    - name: Create IAM Policy
      amazon.aws.iam_policy:
        iam_name: "{{ lambda_role }}"
        iam_type: role
        policy_name: rollback_lambda_policy
        policy_json: >-
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "logs:CreateLogGroup",
                "Resource": "arn:aws:logs:{{ region }}:{{ account_id }}:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "arn:aws:logs:eu-west-3:{{ region }}:log-group:/aws/lambda/{{ lambda_name }}:*"
                ]
              }
            ]
          }

    - name: Always pause after IAM Role creation
      ansible.builtin.pause:
        seconds: 20

    - name: Create a Lambda function
      amazon.aws.lambda:
        name: '{{ lambda_name }}'
        region: "{{ region }}"
        state: present
        zip_file: '{{ playbook_dir }}/../{{ zip_file }}'
        runtime: '{{ runtime }}'
        role: '{{ role.iam_role.arn }}'
        handler: '{{ handler }}'
      register: lambda_result

    - name: lambda returns
      ansible.builtin.debug:
        var: lambda_result

    - name: Allow API Gateway to invoke Lambda
      amazon.aws.lambda_policy:
        state: present
        function_name: '{{ lambda_name }}'
        action: lambda:InvokeFunction
        principal: apigateway.amazonaws.com
        statement_id: apigw-access
        source_arn: "arn:aws:execute-api:{{ region }}:{{ account_id }}:*/*/*/hello"
        region: "{{ region }}"

    - name: Setup AWS API Gateway setup on AWS and deploy API definition
      community.aws.api_gateway:
        name: "{{ api_gw_name }}"
        #swagger_file: "{{ playbook_dir }}/../files/swagger.yml"
        swagger_text: "{{ lookup('template', playbook_dir + '/../files/swagger.yml') }}"
        stage: production
        cache_enabled: true
        cache_size: '1.6'
        tracing_enabled: true
        endpoint_type: REGIONAL
        region: "{{ region }}"
        state: present
      register: api_gw_result

    - name: api gateway returns
      debug:
        var: api_gw_result

